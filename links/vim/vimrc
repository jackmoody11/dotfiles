" Install vim-plug if it isn't already
if empty(glob('~/dotfiles/links/vim/autoload/plug.vim'))
  silent !curl -fLo ~/dotfiles/links/vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif


""" Plugins
" Install Plugins with `:PlugInstall`
call plug#begin('~/dotfiles/links/vim/plugged')

function! BuildYCM(info)
  " info is a dictionary with 3 fields
  " - name:   name of the plugin
  " - status: 'installed', 'updated', or 'unchanged'
  " - force:  set on PlugInstall! or PlugUpdate!
  if a:info.status == 'installed' || a:info.force
    !./install.py
  endif
endfunction


Plug 'dracula/vim', { 'as': 'dracula' }
Plug 'vim-airline/vim-airline'
Plug 'valloric/youcompleteme', { 'do': function('BuildYCM') }
Plug 'scrooloose/nerdtree'
Plug 'tpope/vim-fugitive'
Plug 'wikitopian/hardmode'
Plug 'raimondi/delimitmate'
Plug 'tpope/vim-surround'
Plug 'kien/ctrlp.vim'

call plug#end()


""" Color Scheme
" Configure Dracula to work
let g:dracula_italic = 0
colorscheme dracula
highlight Normal ctermbg=None


""" General
" Allow unsaved changes to be stashed when switching buffers
set hidden
" Disable swap files
set noswapfile
set number " insert line numbers
set timeoutlen=750 ttimeoutlen=0
" Allow backspacking over everything in insert mode
set backspace=indent,eol,start
" Keep 10000 lines of command history
set history=10000
" Update faster
set updatetime=250
set textwidth=0
set wrap
set linebreak


""" Mappings
" Insert mode
" insert -> visual mode
inoremap jj <ESC>

" Visual mode
" visual -> normal mode
xnoremap jk <ESC>
xnoremap kj <ESC>


""" Autocmd
autocmd BufEnter * silent! lcd %:p:h " automatically cd into current buffer


""" NERDTree
let NERDTreeShowHidden=1
let NERDTreeDirArrows=0
let NERDTreeMinimalUI=0
" Change into directory when entering
let g:NERDTreeChDirMode = 2

" Close vim if only window is NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" Get rid of netrw message at top of directories
let g:netrw_list_hide = '^\./$'
let g:netrw_hide = 1

" Ctrl + n toggles NERDTree
map <C-n> :NERDTreeToggle<CR>
" Map r to change pwd
map <leader>r :NERDTreeFind<cr>


""" YouCompleteMe
" Use either Enter or ctrl+y to select autocompletion
let g:ycm_key_list_stop_completion = ['<C-y>']

""" Hard Mode
" No using arrow keys!!!
let g:HardMode_level = 'wannabe'
let g:HardMode_hardmodeMsg = 'Do not use this!'
autocmd VimEnter,BufNewFile,BufReadPost * silent! call HardMode()

""" Ctrl-p
let g:ctrlp_show_hidden = 1
